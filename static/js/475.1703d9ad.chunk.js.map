{"version":3,"file":"static/js/475.1703d9ad.chunk.js","mappings":"yQAGaA,GAAaC,E,QAAAA,GAAOC,EAAAA,GAAPD,CAAH,mP,SCAVE,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC7B,OACE,UAACL,EAAD,CAAYI,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaE,KAAK,OACjBD,IAGN,EC6DD,EA/DqB,WAAO,IAAD,IACzB,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAQ7C,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBR,GAASS,MAAK,SAAAC,GAC5BX,EAAgBW,EACjB,GACF,GAAE,CAACV,KAGF,6BACE,SAACP,EAAD,CAAUC,GAAIU,EAAd,sBACA,4BACE,0BAEI,gBACEO,IAAG,UAtBM,8BAsBN,OArBU,UAqBV,OAA2Cb,EAAac,aAC3DC,IAAKf,EAAagB,oBAIxB,4BACE,wBAAKhB,EAAaiB,SAClB,wCAAgBC,KAAKC,MAAkC,GAA5BnB,EAAaoB,cAAxC,QACA,sCACA,uBAAIpB,EAAaqB,YACjB,oCACA,yBACGrB,EAAasB,QACZtB,EAAasB,OAAOC,QACpBvB,EAAasB,OAAOE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACtB,0BAAgBA,GAALD,EADW,aAMhC,4BACE,0FACA,oDACA,2BACE,yBACE,SAAC,KAAD,CAAM7B,GAAG,OAAOW,OAAK,UAAOH,EAASG,OAArC,qBAIF,yBACE,SAAC,KAAD,CAAMX,GAAG,UAAUW,OAAK,UAAOH,EAASG,OAAxC,2BAKJ,0FACA,SAAC,EAAAoB,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,WAKT,C,mMCnEDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCAEHC,EAAW,mCAAG,oGACFF,EAAAA,EAAAA,IAAA,qCAAwCC,IADtC,cACnBE,EADmB,yBAElBA,EAASpB,MAFS,2CAAH,qDAKXF,EAAe,mCAAG,WAAMR,GAAN,uFACN2B,EAAAA,EAAAA,IAAA,gBACZ3B,EADY,oBACO4B,EADP,oBADM,cACvBE,EADuB,yBAItBA,EAASpB,MAJa,2CAAH,sDAOfqB,EAAe,mCAAG,WAAM/B,GAAN,uFACN2B,EAAAA,EAAAA,IAAA,gBACZ3B,EADY,4BACe4B,EADf,oBADM,cACvBE,EADuB,yBAItBA,EAASpB,MAJa,2CAAH,sDAOfsB,EAAe,mCAAG,WAAMhC,GAAN,uFACN2B,EAAAA,EAAAA,IAAA,gBACZ3B,EADY,4BACe4B,EADf,oBADM,cACvBE,EADuB,yBAItBA,EAASpB,MAJa,2CAAH,sDAOfuB,EAAS,mCAAG,WAAMC,GAAN,uFACAP,EAAAA,EAAAA,IAAA,+BACGC,EADH,4DAC8DM,IAF9D,cACjBJ,EADiB,yBAIhBA,EAASpB,MAJO,2CAAH,qD","sources":["components/BackLink/BackLink.styled.jsx","components/BackLink/BackLink.jsx","pages/MovieDetails.jsx","services/fetchMovies .js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: #494949;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n","import { HiArrowLeft } from 'react-icons/hi';\nimport { StyledLink } from 'components/BackLink/BackLink.styled';\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"20\" />\n      {children}\n    </StyledLink>\n  );\n};\n","import { useState, useEffect, Suspense } from 'react';\nimport { useParams, Outlet, Link, useLocation } from 'react-router-dom';\nimport { getMovieDetails } from 'services/fetchMovies ';\nimport { BackLink } from 'components/BackLink/BackLink';\n\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p';\nconst IMAGE_POSTER_SIZES = '/w342/';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState([]);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    getMovieDetails(movieId).then(data => {\n      setMovieDetails(data);\n    });\n  }, [movieId]);\n\n  return (\n    <main>\n      <BackLink to={backLinkHref}>Go back</BackLink>\n      <div>\n        <div>\n          {\n            <img\n              src={`${IMAGE_BASE_URL}${IMAGE_POSTER_SIZES}${movieDetails.poster_path}`}\n              alt={movieDetails.original_title}\n            />\n          }\n        </div>\n        <div>\n          <h2>{movieDetails.title}</h2>\n          <p>User Score: {Math.round(movieDetails.vote_average * 10)}%</p>\n          <h3>Overview</h3>\n          <p>{movieDetails.overview}</p>\n          <h4>Genres</h4>\n          <div>\n            {movieDetails.genres &&\n              movieDetails.genres.length &&\n              movieDetails.genres.map(({ id, name }) => (\n                <span key={id}>{name}</span>\n              ))}\n          </div>\n        </div>\n      </div>\n      <div>\n        <p>_____________________________________________________________</p>\n        <h4>Additional information</h4>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={{ ...location.state }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ ...location.state }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n        <p>_____________________________________________________________</p>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = 'a148ed5961285512fd3954af576af4a0';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return response.data;\n};\n"],"names":["StyledLink","styled","Link","BackLink","to","children","size","useState","movieDetails","setMovieDetails","movieId","useParams","location","useLocation","backLinkHref","state","from","useEffect","getMovieDetails","then","data","src","poster_path","alt","original_title","title","Math","round","vote_average","overview","genres","length","map","id","name","Suspense","fallback","axios","API_KEY","getTrending","response","getMovieCredits","getMovieReviews","getMovies","query"],"sourceRoot":""}