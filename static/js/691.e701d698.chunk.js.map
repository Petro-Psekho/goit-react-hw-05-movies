{"version":3,"file":"static/js/691.e701d698.chunk.js","mappings":"kSAEaA,EAAaC,EAAAA,EAAAA,KAAH,2CAIVC,EAAaD,EAAAA,EAAAA,KAAH,sEAKVE,EAAkBF,EAAAA,EAAAA,MAAH,iMASfG,EAAkBH,EAAAA,EAAAA,OAAH,0a,SCuD5B,EA9De,WACb,OAKII,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAGF,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCT,EAAAA,EAAAA,WAAS,GAA3C,eAAOU,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACHN,IAGLK,GAAa,IACbE,EAAAA,EAAAA,IAAUP,GACPQ,MAAK,SAAAC,GACJb,EAAgBa,EAAKC,SACrBL,GAAa,EACd,IACAM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACf,GAAE,CAACZ,IAUJ,OACE,UAACjB,EAAD,YACE,UAACE,EAAD,CAAY8B,SAAUzB,GAVT,SAAAmB,GACfA,EAAOO,OAAOC,OAAOR,GAErBV,EAAgB,CAAEC,MAAOS,IAEzBhB,GACD,IAIG,WACE,SAACP,GAAD,QACEgC,aAAa,OACT7B,EAAS,QAAS,CAAE8B,UAAU,MAGnC5B,EAAOS,QAAS,sDAEjB,SAACb,EAAD,CAAiBiC,KAAK,SAAtB,wBAGF,0BACGhB,IAAa,SAACiB,EAAA,EAAD,IACb1B,EAAa2B,KAAI,SAAAC,GAAK,OACrB,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMzB,GAAxC,UACE,uBAAIqB,EAAMK,WAFLL,EAAME,GADM,SAU9B,C,mMCvEDI,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,mCAEHC,EAAW,mCAAG,oGACFF,EAAAA,EAAAA,IAAA,qCAAwCC,IADtC,cACnBE,EADmB,yBAElBA,EAASvB,MAFS,2CAAH,qDAKXwB,EAAe,mCAAG,WAAMC,GAAN,uFACNL,EAAAA,EAAAA,IAAA,gBACZK,EADY,oBACOJ,EADP,oBADM,cACvBE,EADuB,yBAItBA,EAASvB,MAJa,2CAAH,sDAOf0B,EAAe,mCAAG,WAAMD,GAAN,uFACNL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACeJ,EADf,oBADM,cACvBE,EADuB,yBAItBA,EAASvB,MAJa,2CAAH,sDAOf2B,EAAe,mCAAG,WAAMF,GAAN,uFACNL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACeJ,EADf,oBADM,cACvBE,EADuB,yBAItBA,EAASvB,MAJa,2CAAH,sDAOfF,EAAS,mCAAG,WAAMP,GAAN,uFACA6B,EAAAA,EAAAA,IAAA,+BACGC,EADH,4DAC8D9B,IAF9D,cACjBgC,EADiB,yBAIhBA,EAASvB,MAJO,2CAAH,qD","sources":["pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","services/fetchMovies .js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MainMovies = styled.main`\n  padding: 0 5px;\n`;\n\nexport const MoviesForm = styled.form`\n  display: flex;\n  margin: 5px 0 18px 10px;\n`;\n\nexport const MoviesFormInput = styled.input`\n  width: 300px;\n  height: 30px;\n  margin-right: 10px;\n  font-size: 18px;\n  border: none;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2), 0 4px 6px rgba(0, 0, 0, 0.2);\n`;\n\nexport const FormInputButton = styled.button`\n  width: 120px;\n  height: 32px;\n  margin-right: 10px;\n  font-size: 16px;\n  border: none;\n  border-radius: 2px;\n  color: #fff;\n  background-color: orange;\n\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2), 0 4px 6px rgba(0, 0, 0, 0.2);\n\n  :hover {\n    background-color: orangered;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n    transform: scale(1.03);\n    transition: transform 250ms;\n  }\n`;\n","import { useForm } from 'react-hook-form';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation, Link } from 'react-router-dom';\n\nimport { getMovies } from 'services/fetchMovies ';\nimport { LoaderSpinner } from 'components/LoaderSpinner/LoaderSpinner';\nimport {\n  MainMovies,\n  MoviesForm,\n  MoviesFormInput,\n  FormInputButton,\n} from 'pages/Movies/Movies.styled';\n\nconst Movies = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm();\n\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    setIsLoading(true);\n    getMovies(query)\n      .then(data => {\n        setSearchMovies(data.results);\n        setIsLoading(false);\n      })\n      .catch(error => console.log(error));\n  }, [query]);\n\n  const onSubmit = data => {\n    data = Object.values(data);\n\n    setSearchParams({ query: data });\n\n    reset();\n  };\n\n  return (\n    <MainMovies>\n      <MoviesForm onSubmit={handleSubmit(onSubmit)}>\n        <MoviesFormInput\n          autoComplete=\"off\"\n          {...register('query', { required: true })}\n        />\n\n        {errors.query && <span>This field is required</span>}\n\n        <FormInputButton type=\"submit\">Search</FormInputButton>\n      </MoviesForm>\n\n      <ul>\n        {isLoading && <LoaderSpinner />}\n        {searchMovies.map(movie => (\n          <li key={movie.id}>\n            <Link to={`${movie.id}`} state={{ from: location }}>\n              <p>{movie.title}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </MainMovies>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = 'a148ed5961285512fd3954af576af4a0';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\n  );\n  return response.data;\n};\n"],"names":["MainMovies","styled","MoviesForm","MoviesFormInput","FormInputButton","useForm","register","handleSubmit","errors","formState","reset","useState","searchMovies","setSearchMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","isLoading","setIsLoading","useEffect","getMovies","then","data","results","catch","error","console","log","onSubmit","Object","values","autoComplete","required","type","LoaderSpinner","map","movie","to","id","state","from","title","axios","API_KEY","getTrending","response","getMovieDetails","movieId","getMovieCredits","getMovieReviews"],"sourceRoot":""}